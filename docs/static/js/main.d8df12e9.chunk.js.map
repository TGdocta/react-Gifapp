{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","alt","src","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","gif","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","divRoot","document","querySelector","ReactDOM","render","getElementById"],"mappings":"4NAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,uBAAMC,SAXU,SAACC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAG,OAAMP,GAAN,mBAAoBO,OACtCN,EAAc,MAMlB,UACA,8BAAMD,IACF,uBACAQ,KAAK,OACLC,MAAQT,EACRU,SApBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,cAyB/BZ,EAAYe,UAAY,CACpBd,cAAgBe,IAAUC,KAAKC,Y,mCClCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEVC,EAFU,kDAEsCC,UAAUH,GAFhD,+DAIGI,MAAMF,GAJT,cAIVG,EAJU,gBAKKA,EAAKC,OALV,uBAKTC,EALS,EAKTA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVzB,kBAcTM,GAdS,4CAAH,sDCCRO,EAAc,SAAC,GAAqB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAEnC,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAKL,EAAOM,IAAKhB,IACtB,4BAAIU,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEZlB,mBAAS,CAC/ByB,KAAK,GACLa,SAAQ,IAJ0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAyBtC,OAlBAC,qBAAU,WAENxB,EAAQC,GACPwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAOlB,CAACpB,IAIIqB,EDpBwBK,CAAa1B,GAAhCa,EAJuB,EAI5BN,KAAaa,EAJe,EAIfA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IACjDoB,GAAW,mBAAGJ,UAAU,mCAAb,2BAEb,qBAAKA,UAAU,YAAf,SAGIH,EAAOJ,KAAI,SAAAkB,GACP,OAAO,cAAC,EAAD,eAGUA,GAFAA,EAAIhB,aEkB1BiB,EAlCM,WAAK,IAAD,EAEe9C,mBAAS,CAAC,cAFzB,mBAEd+C,EAFc,KAEFhD,EAFE,KAUrB,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAGA,6BAEQgD,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAWA,GADLA,YCdf8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCRO,EAAUC,SAASC,cAAc,SAEvCC,IAASC,OAEL,cAAC,EAAD,IAEFH,SAASI,eAAe,OAAQL,IAMlCR,M","file":"static/js/main.d8df12e9.chunk.js","sourcesContent":["\r\nimport React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n \r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e)=> {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const haldeSubmit = (e) => {\r\n        e.preventDefault()\r\n     \r\n        if (inputValue.trim().length > 2) {\r\n            setCategories( cat =>  [inputValue,...cat] )\r\n            setInputValue('')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ haldeSubmit }>\r\n        <pre>{inputValue}</pre>\r\n            <input \r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","\r\n export const getGifs = async (category) => {\r\n\r\n        const url =` https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=v0EZNTofu3wLJ9OPzcd4srLDR0fTQ80p`\r\n\r\n        const resp = await fetch(url)\r\n        const {data} = await resp.json()\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id:img.id,\r\n                title:img.title,\r\n                url: img.images.downsized_medium.url\r\n            }\r\n        })\r\n     \r\n        return gifs;\r\n\r\n}\r\n\r\n  ","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id,title,url} ) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn \" >\r\n            <img alt={title} src={url}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\nimport { GifGridItem } from \"./GifGridItem\"\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n//     const [images, setImages] = useState([])\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>   \r\n            { loading && <p className=\"animate__animated animate__flash\">Loading . . .</p> }\r\n         \r\n            <div className=\"card-grid\" >\r\n          \r\n                {\r\n                images.map(gif => {\r\n                    return <GifGridItem \r\n                                key={gif.id} \r\n                            \r\n                                { ...gif } /> \r\n                }) \r\n                \r\n                }\r\n           \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(()=>{\r\n      \r\n        getGifs(category)\r\n        .then(imgs =>{\r\n        \r\n            setstate({\r\n                data:imgs,\r\n                loading:false\r\n            })\r\n                \r\n        \r\n        })\r\n\r\n\r\n    },[category])\r\n\r\n  \r\n\r\n    return state\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nconst GifExpertApp = ()=>{\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    // const handledAdd = (e) =>{\r\n    //     setCategories( ['Shingeki no Kyojin',... categories] )\r\n    //     setCategories( [... categories,'Shingeki no Kyojin'] )\r\n    //     setCategories( cat =>  [... cat,'Shingeki no Kyojin'] )\r\n    // }\r\n \r\n    return (\r\n        <>\r\n            <h2> GifExpertApp </h2>\r\n            <AddCategory setCategories ={ setCategories }/>\r\n            <hr />\r\n\r\n      \r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                        key={ category}\r\n                        category= {category} />\r\n                    ))\r\n                }\r\n                \r\n            </ol>\r\n        </>\r\n    )\r\n    \r\n\r\n\r\n}\r\n\r\nexport default GifExpertApp","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nimport reportWebVitals from './reportWebVitals';\n\n\nconst divRoot = document.querySelector('#root')\n\nReactDOM.render(\n \n    <GifExpertApp />,\n\n  document.getElementById('root' ,divRoot)\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}